machine:
  java:
    version: openjdk8
  environment:
    ANDROID_NDK_ROOT: $ANDROID_NDK
    GOTHEMIS_IMPORT: github.com/cossacklabs/themis/gothemis
    GOROOT: $HOME/go
    GOPATH: $HOME/gopath
    PATH: $GOROOT/bin:$PATH
    VALGRIND_BUILD_PATH: $HOME/valgrind
    # to avoid OOM killer (https://circleci.com/docs/1.0/oom/#out-of-memory-errors-in-android-builds)
    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1024m -XX:+HeapDumpOnOutOfMemoryError"'
    # add define that turn off one nist test (tests/soter/soter_rand_test.c:190) that always fail on ci machine but ok on real machine
    CFLAGS: "-DCIRICLE_TEST"
    BORINGSSL_PATH: "$HOME/boringssl"

## Customize dependencies
dependencies:
  cache_directories:
    - "~/valgrind"
    - "~/go"
    - "~/boringssl"

  pre:
    - sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get -y install php5 cmake libssl-dev python3 python3-setuptools ruby ninja-build lcov build-essential libc6-dbg
    - sudo ln -sf /usr/bin/gcov-4.9 /usr/bin/gcov
    - if [ ! -d $GOROOT ]; then cd $HOME && wget https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz && tar xf go1.6.2.linux-amd64.tar.gz; fi
    - gem install coveralls-lcov
    - go get github.com/mattn/goveralls
    # download last valgrind because current version of valgrind on ubuntu (3.10.0) gives false positive errors
    # link from http://valgrind.org/downloads/current.html
    # don't fetch if was cached
    - if [ ! -d $VALGRIND_BUILD_PATH ]; then wget ftp://sourceware.org/pub/valgrind/valgrind-3.13.0.tar.bz2 && tar -xjf valgrind-3.13.0.tar.bz2 && cd valgrind-3.13.0 && ./configure --prefix=$VALGRIND_BUILD_PATH && make && sudo make install; fi
    # install Android SDK packages
    - echo y | android update sdk --no-ui --all --filter 'tool'
    - yes | $ANDROID_HOME/tools/bin/sdkmanager 'tools' 'platform-tools' 'build-tools;27.0.3' 'platforms;android-27' 'ndk-bundle' 'system-images;android-22;default;armeabi-v7a'
    - $ANDROID_HOME/tools/bin/avdmanager create avd --name nexus --device "Nexus 5" --package 'system-images;android-22;default;armeabi-v7a'

  override:
    - git submodule update --init
    - make
    - make JAVA_HOME=/usr/lib/jvm/default-java themis_jni
    - sudo make install
    - sudo make themispp_install
    - sudo make pythemis_install
    - sudo make rubythemis_install
    - sudo make phpthemis_install
    - if [ ! -d $BORINGSSL_PATH ]; then cd $HOME && git clone https://boringssl.googlesource.com/boringssl && cd boringssl && git checkout chromium-stable && mkdir build && cd build && cmake .. && make && cp decrepit/libdecrepit.a crypto/; fi
    - make ENGINE=boringssl ENGINE_INCLUDE_PATH=$HOME/boringssl/include ENGINE_LIB_PATH=$HOME/boringssl/build/crypto BUILD_PATH=build_with_boringssl prepare_tests_basic
    - make BUILD_PATH=cover_build COVERAGE=y prepare_tests_basic
    - make prepare_tests_all
    - mkdir -p $HOME/gopath/src/$GOTHEMIS_IMPORT
    - rsync -auv gothemis/ $HOME/gopath/src/$GOTHEMIS_IMPORT/
    - lcov --directory . --zerocounters

compile:
  override:
    # limit CMake/Ninja build concurrency when building BoringSSL
    # otherwise we hit the 4GB memory limit for the build container
    - echo 'set_property(GLOBAL APPEND PROPERTY JOB_POOLS circleci_job_pool=4)' >> third_party/boringssl/src/CMakeLists.txt
    - sed -i 's/"-GNinja"/"-DCMAKE_JOB_POOL_COMPILE=circleci_job_pool", "-GNinja"/g' third_party/boringssl/build.gradle
    - ./gradlew --no-daemon --no-parallel --max-workers=2 build
 
## Customize test commands
test:
  override:
    # run only if CIRCLE_PR_NUMBER variable is not set (it's not pull request and COVERALLS_TOKEN will be set via circleCI for non-PR build) and COVERALLS_TOKEN is set
    # we should calculate coverage for gothemis and send report before sending coverage of main C part
    - '[ -z "$CIRCLE_PR_NUMBER" ] && ! [ -z "$COVERALLS_TOKEN" ] && cd $HOME/gopath/src/$GOTHEMIS_IMPORT && $HOME/gopath/bin/goveralls -v -service=circle-ci -repotoken=$COVERALLS_TOKEN || true'
    - sudo /sbin/ldconfig    
    - make test
    - make test_php
    - make test_python
    - make test_js
    # it's important to set version of ruby precisely.
    - rvm use system && make test_ruby
    - make test_go
      ${VALGRIND_BUILD_PATH}/bin/valgrind build/tests/soter_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'
    - ${VALGRIND_BUILD_PATH}/bin/valgrind build/tests/themis_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'
    - cover_build/tests/soter_test
    - cover_build/tests/themis_test
    - lcov --directory . --capture --output-file coverage.info
    - lcov --remove coverage.info 'tests/*' 'src/soter/openssl/*' '/usr/*' --output-file coverage.info
    - lcov --list coverage.info
    - coveralls-lcov -v --repo-token $COVERALLS_TOKEN coverage.info || true
    - ${VALGRIND_BUILD_PATH}/bin/valgrind build_with_boringssl/tests/soter_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'
    - ${VALGRIND_BUILD_PATH}/bin/valgrind build_with_boringssl/tests/themis_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'
    # - tests/check_ios_test.sh `tests/start_ios_test.sh`
    # start Android emulator (we use explicit path, because the update above
    # installs new emulator version, which overrides Circle CIs one )
    - $ANDROID_HOME/emulator/emulator -avd nexus -noaudio -no-window -gpu off -verbose -qemu:
        background: true
    # wait for it to have booted
    - circle-android wait-for-boot
    # run Android tests
    - ./gradlew --no-daemon --no-parallel --max-workers=2 connectedAndroidTest
