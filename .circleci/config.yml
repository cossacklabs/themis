version: 2
jobs:
  x86_64:
    docker:
      - image: cossacklabs/android-build:2019.01
    environment:
      # NIST STS tests tend to fail in Docker environment
      NO_NIST_STS: 1
      WITH_FATAL_WARNINGS: yes
      SOTER_KDF_RUN_LONG_TESTS: yes
    steps:
      - run: sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get -y install libssl-dev python python-setuptools python3 python3-setuptools ruby-dev lcov libc6-dbg rsync software-properties-common pkg-config clang afl
      - run: sudo ln -sf /usr/bin/gcov-5 /usr/bin/gcov
      - run: sudo gem install coveralls-lcov
      - run: go get github.com/mattn/goveralls
      # Install RVM for current user (see https://rvm.io/rvm/install)
      - run:
          name: Install RVM
          command: |
            # Import keys used by RVM maintainers from recommended key server pools
            # See https://rvm.io/rvm/security
            for key in 409B6B1796C275462A1703113804BB82D39DC0E3 \
                       7D2BAF1CF37B13E2069D6956105BD0E739499BDB
            do
                for server in pgp.mit.edu keyserver.pgp.com ha.pool.sks-keyservers.net
                do
                    if gpg --keyserver $server --recv-keys $key
                    then
                        break
                    fi
                done
            done
            curl -sSL https://get.rvm.io | bash -s stable
            source ~/.rvm/scripts/rvm
            rvm use system

      - restore_cache:
          keys:
            - rust

      # Install Rust toolchain (stable) via rustup
      # Instructions taken from https://rustup.rs
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y && cat ~/.cargo/env >> $BASH_ENV && source ~/.cargo/env && cargo --version && rustc --version
      - run: rustup component add clippy
      - run: rustup component add rustfmt

      # download last valgrind because current version of valgrind on ubuntu (3.11.0) gives false positive errors
      # link from http://valgrind.org/downloads/current.html
      # don't fetch if was cached

      - restore_cache:
          keys:
            - valgrind-3.13.0

      - run: if [ ! -d $HOME/valgrind ]; then cd $HOME && wget ftp://sourceware.org/pub/valgrind/valgrind-3.13.0.tar.bz2 && tar -xjf valgrind-3.13.0.tar.bz2 && cd valgrind-3.13.0 && ./configure --prefix=$HOME/valgrind && make && sudo make install; fi

      - save_cache:
          key: valgrind-3.13.0
          paths:
            - ~/valgrind

      - checkout
      - run: git reset HEAD && git submodule sync && git submodule update --init
      - run: make
      - run: make BUILD_PATH=build_compat WITH_SCELL_COMPAT=yes
      - run: make JAVA_HOME=/usr/lib/jvm/default-java themis_jni
      - run: sudo make install
      - run: sudo make themispp_install
      - run: sudo make pythemis_install
      - run: sudo make rbthemis_install
      - run: make ENGINE=boringssl BUILD_PATH=build_with_boringssl prepare_tests_basic
      - run: make BUILD_PATH=cover_build COVERAGE=y prepare_tests_basic
      - run: make prepare_tests_basic BUILD_PATH=build_compat WITH_SCELL_COMPAT=yes
      - run: make prepare_tests_all
      - run: lcov --directory . --zerocounters
      # run only if CIRCLE_PR_NUMBER variable is not set (it's not pull request and COVERALLS_TOKEN will be set via circleCI for non-PR build) and COVERALLS_TOKEN is set
      # we should calculate coverage for gothemis and send report before sending coverage of main C part
      - run: '[ -z "$CIRCLE_PR_NUMBER" ] && ! [ -z "$COVERALLS_TOKEN" ] && cd $HOME/go/src/$GOTHEMIS_IMPORT && $HOME/go/bin/goveralls -v -service=circle-ci -repotoken=$COVERALLS_TOKEN || true'
      - run: sudo /sbin/ldconfig
      - run: make test
      - run: make test BUILD_PATH=build_compat
      - run: make clean_themispp_test && CXX="g++"     CFLAGS="-std=c++03" make themispp_test && make test_cpp
      - run: make clean_themispp_test && CXX="g++"     CFLAGS="-std=c++11" make themispp_test && make test_cpp
      - run: make clean_themispp_test && CXX="g++"     CFLAGS="-std=c++14" make themispp_test && make test_cpp
      - run: make clean_themispp_test && CXX="g++"     CFLAGS="-std=c++17" make themispp_test && make test_cpp
      - run: make clean_themispp_test && CXX="clang++" CFLAGS="-std=c++03" make themispp_test && make test_cpp
      - run: make clean_themispp_test && CXX="clang++" CFLAGS="-std=c++11" make themispp_test && make test_cpp
      - run: make clean_themispp_test && CXX="clang++" CFLAGS="-std=c++14" make themispp_test && make test_cpp
      # Clang 3.8 that we have here does not support C++17 yet
#     - run: make clean_themispp_test && CXX="clang++" CFLAGS="-std=c++17" make themispp_test && make test_cpp
      - run: make test_python
      - run: make test_ruby
      - run: make test_rust
      - run: $HOME/valgrind/bin/valgrind build/tests/soter_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'
      - run: $HOME/valgrind/bin/valgrind build/tests/themis_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'
      - run: cover_build/tests/soter_test
      - run: cover_build/tests/themis_test
      - run: lcov --directory . --capture --output-file coverage.info
      - run: lcov --remove coverage.info 'tests/*' 'src/soter/openssl/*' '/usr/*' --output-file coverage.info
      - run: lcov --list coverage.info
      - run: coveralls-lcov -v --repo-token $COVERALLS_TOKEN coverage.info || true
      - run: $HOME/valgrind/bin/valgrind build_with_boringssl/tests/soter_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'
      - run: $HOME/valgrind/bin/valgrind build_with_boringssl/tests/themis_test 2>&1 | grep "ERROR SUMMARY\|definitely lost\|indirectly lost\|possibly lost" | awk '{sum += $4} END {print $0; if ( sum > 0 ) { exit 1 } }'

      - save_cache:
          key: rust
          paths:
            - ~/.cargo
            - ~/.rustup

workflows:
  version: 2
  tests:
    jobs:
      - x86_64
  nightly:
    # Apparently CircleCI does not have a "push" or "pull request" trigger
    # so we have to have a separate workflow with the same job list.
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - master
                - stable
    jobs:
      - x86_64
