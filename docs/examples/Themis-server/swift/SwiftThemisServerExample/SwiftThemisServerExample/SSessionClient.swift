//
//  SSessionClient.swift
//  SwiftThemisServerExample
//
//  Created by Anastasi Voitova on 19.04.16.
//  Copyright © 2016 CossackLabs. All rights reserved.
//

import Foundation

final class Transport: TSSessionTransportInterface {
    
    private var serverId: String?
    private var serverPublicKeyData: NSData?
    
    func setupKeys(serverId: String, serverPublicKey: String) {
        self.serverId = serverId
        self.serverPublicKeyData = NSData(base64EncodedString: serverPublicKey,
                                          options: .IgnoreUnknownCharacters)
    }
    
    override func publicKeyFor(binaryId: NSData!) throws -> NSData {
        let error: NSError = NSError(domain: "com.example", code: -1, userInfo: nil)
        let stringFromData = String(data: binaryId, encoding: NSUTF8StringEncoding)
        if stringFromData == nil {
            throw error
        }
        
        if stringFromData == serverId {
            guard let resultData: NSData = serverPublicKeyData else {
                throw error
            }
            return resultData
        }
        // it should be nil, but swift ¯\_(ツ)_/¯
        return NSData()
    }
}


final class SSessionClient {
    
    var transport: Transport?
    var session: TSSession?

    
    // user id and server public key are copied from server setup
    // https://themis.cossacklabs.com/interactive-simulator/setup/
    let kClientId: String = "<client id>"
    let kServerId: String = "<server id>"
    let kServerPublicKey: String = "<server public key>"
    
    // these two should generated by running `generateClientKeys()`
    let kClientPrivateKey: String = "<generated client private key>"
    let kClientPublicKey: String = "<generated client public key>"
    
    
    private func postRequestTo(stringURL: String, message: NSData, completion: (data: NSData?, error: NSError?) -> Void) {
        let url: NSURL = NSURL(string: stringURL)!
        let config: NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()
        let session: NSURLSession = NSURLSession(configuration: config)
        
        let request: NSMutableURLRequest = NSMutableURLRequest(URL: url)
        request.HTTPMethod = "POST"
        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-type")
        
        let base64URLEncodedMessage: String = message.base64EncodedStringWithOptions(.EncodingEndLineWithLineFeed)
                .stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.alphanumericCharacterSet())!
        
        let base64Body: String = "\("message=")\(base64URLEncodedMessage)"
        let body: NSData = base64Body.dataUsingEncoding(NSUTF8StringEncoding)!
        
        let uploadTask: NSURLSessionDataTask = session.uploadTaskWithRequest(request, fromData: body)
            { (data: NSData?, response: NSURLResponse?, error: NSError?) -> Void in
            
            guard let data = data else {
                print("Oops, response = \(response)\n error = \(error)")
                completion(data: nil, error: error)
                return
            }
            
            if let response = response as? NSHTTPURLResponse where response.statusCode != 200 {
                print("Oops, response = \(response)\n error = \(error)")
                completion(data: nil, error: error)
                return
            }
            
            completion(data: data, error: nil)
            return
        }
        
        uploadTask.resume()
    }
    
    
    private func startSessionTo(stringURL: String, message: NSData, completion: (error: NSError?) -> Void) {
        postRequestTo(stringURL, message: message) { (data: NSData?, error: NSError?) -> Void in
            guard let data = data else {
                print("Error occurred while starting session \(error)")
                return
            }
            
            do {
                guard let decryptedMessage = try self.session?.unwrapData(data) else {
                    throw NSError(domain: "com.example", code: -4, userInfo: nil)
                }
                
                if let session = self.session where session.isSessionEstablished() == true {
                    print("Session established!")
                    completion(error: nil)
                } else {
                    self.startSessionTo(stringURL, message: decryptedMessage, completion: completion)
                }
            } catch let error as NSError {
                // frustrating, but 'unwrapData' can return nil without error (and it's okay)
                // Swift returns error "Foundation._GenericObjCError"
                if let session = self.session where session.isSessionEstablished() == true {
                    print("Session established!")
                    completion(error: nil)
                } else {
                    print("Error occurred while decrypting session start message \(error)", #function)
                    completion(error: error)
                }
                return
            }
        }
    }
    
    
    private func sendMessageTo(stringURL: String, message: String, completion: (data: String?, error: NSError?) -> Void) {
        var encryptedMessage: NSData
        do {
            guard let wrappedMessage: NSData = try self.session?.wrapData(message.dataUsingEncoding(NSUTF8StringEncoding)) else {
                print("Error occurred during wrapping message ", #function)
                return
            }
            encryptedMessage = wrappedMessage
        } catch let error as NSError {
            print("Error occurred while wrapping message \(error)", #function)
            completion(data: nil, error: error)
            return
        }
        
        postRequestTo(stringURL, message: encryptedMessage) { (data: NSData?, error: NSError?) -> Void in
            guard let data = data else {
                print("Error occurred while sending message \(error)")
                return
            }
            
            do {
                guard let decryptedMessage: NSData = try self.session?.unwrapData(data),
                        let resultString: String = String(data: decryptedMessage, encoding: NSUTF8StringEncoding) else {
                            
                    throw NSError(domain: "com.example", code: -3, userInfo: nil)
                }
                completion(data: resultString, error: nil)
                
            } catch let error as NSError {
                print("Error occurred while decrypting message \(error)", #function)
                completion(data: nil, error: error)
                return
            }
        }
    }
    
    
    func runSecureSessionCITest() {
        // uncomment to generate keys firste
        // generateClientKeys()
        // return;
        
        
        checkKeysNotEmpty()
        
        guard let clientIdData: NSData = kClientId.dataUsingEncoding(NSUTF8StringEncoding),
            let clientPrivateKey: NSData = NSData(base64EncodedString: kClientPrivateKey,
                                                  options: .IgnoreUnknownCharacters) else {
                                                    
            print("Error occurred during base64 encoding", #function)
            return
        }
        
        self.transport = Transport()
        self.transport?.setupKeys(kServerId, serverPublicKey: kServerPublicKey)
        self.session = TSSession(userId: clientIdData, privateKey: clientPrivateKey, callbacks: self.transport)

        
        var connectionMessage: NSData
        do {
            guard let resultOfConnectionRequest = try session?.connectRequest() else {
                throw NSError(domain: "com.example", code: -2, userInfo: nil)
            }
            
            connectionMessage = resultOfConnectionRequest
        } catch let error as NSError {
            print("Error occurred while connecting to session \(error)", #function)
            return
        }
        
        
        let stringURL: String = "\("https://themis.cossacklabs.com/api/")\(kClientId)/"
        self.startSessionTo(stringURL, message: connectionMessage) { (error: NSError?) -> Void in
            if error != nil {
                print("Error occurred while session initialization \(error)", #function)
                return
            }
            
            self.sendMessageTo(stringURL, message: "This is test message from Swift")
                { (data: String?, messageError: NSError?) -> Void in
                
                guard let data = data else {
                    print("Error occurred while sending message \(messageError)", #function)
                    return
                }
                print("Response success:\n\(data)")
            }
        }
    }
    
    
    private func generateClientKeys() {
        // use client public key to run server
        // https://themis.cossacklabs.com/interactive-simulator/setup/
        //
        // use client private key to encrypt your message
        
        guard let keyGeneratorEC: TSKeyGen = TSKeyGen(algorithm: .EC) else {
            print("Error occurred while initializing object keyGeneratorEC", #function)
            return
        }
        let privateKeyEC: NSData = keyGeneratorEC.privateKey
        let publicKeyEC: NSData = keyGeneratorEC.publicKey
        
        print("EC privateKey = \(privateKeyEC.base64EncodedDataWithOptions(.Encoding64CharacterLineLength))")
        print("RSA publicKey = \(publicKeyEC.base64EncodedDataWithOptions(.Encoding64CharacterLineLength))")
    }
    
    
    private func checkKeysNotEmpty() {
        assert(!(kClientId == "<client id>"), "Get client id from https://themis.cossacklabs.com/interactive-simulator/setup/")
        assert(!(kServerId == "<server id>"), "Get server id from https://themis.cossacklabs.com/interactive-simulator/setup/")
        
        assert(!(kServerPublicKey == "<server public key>"), "Get server key from https://themis.cossacklabs.com/interactive-simulator/setup/")
        assert(!(kClientPrivateKey == "<generated client private key>"), "Generate client keys by running `generateClientKeys()` or obtain from server https://themis.cossacklabs.com/interactive-simulator/setup/")
        assert(!(kClientPublicKey == "<generated client public key>"), "Generate client keys by running `generateClientKeys()` or obtain from server https://themis.cossacklabs.com/interactive-simulator/setup/")
    }
}
