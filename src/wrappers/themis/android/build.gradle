apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

buildscript {
    dependencies {
        // Android Gradle plugin
        classpath 'com.android.tools.build:gradle:7.2.2'

        // Kotlin plugin for Android
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

dependencies {
    implementation project(":boringssl")
    // Use a compatibility version to support Java 6.
    implementation 'org.jetbrains:annotations-java5:16.0.2'
    // Instrumentation tests
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    // Keep it at 1.2, see tests/themis/wrappers/android/com/cossacklabs/themis/test/Base64.java
    androidTestImplementation 'commons-codec:commons-codec:1.2'
    // Kotlin for instrumentation tests
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

android {
    compileSdkVersion 28
    buildToolsVersion "30.0.3"
    ndkVersion "25.1.8937393"

    // BoringSSL requires at least API 21. Google Play as of August 2019 requires
    // to target at least API 28 (but we can still support lower versions).
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        // Our tests are written in JUnit, set default runner appropriately
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // Compile for Java 7.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            java.srcDirs = ['../java']
            manifest.srcFile 'AndroidManifest.xml'
            jniLibs.srcDirs = ['libs']
        }
        androidTest.setRoot('tests/themis/wrappers/android')
        androidTest.java.srcDirs = ['../../../../tests/themis/wrappers/android']
        androidTest.manifest.srcFile '../../../../tests/themis/wrappers/android/AndroidManifest.xml'
    }

    // Dependencies for instrumentation tests
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    // TODO(ilammy, 2021-02-21): improve sanity and make this less brittle
    // This piece of arcane magick ensures that BoringSSL is built before Android stuff.
    // However, we also need to ensure that BoringSSL artifacts are NOT published
    // when JavaThemis is published.
    // There should be a better way to specify build dependencies, right?
    // Or at least make it a list of depenedencies to add, not to exclude.
    tasks.whenTaskAdded { task ->
        def excludeBoringSSL = [
            'publish',
            'publishToMavenLocal',
            'publishProductionPublicationToMavenRepository',
            'publishProductionPublicationToMavenLocal',
            'generatePomFileForProductionPublication',
            'generateSourceJar',
            'generateJavadoc',
            'generateJavadocJar',
            'signProductionPublication',
        ]
        if (!excludeBoringSSL.contains(task.name)) {
            task.dependsOn(':boringssl:' + task.name)
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "../../../../jni/Android.mk"
        }
    }

    // Due to various renames in annotation modules, Android's DEX compiler is confused.
    // Remove them from compiled code to avoid issues.
    // https://github.com/vimeo/vimeo-networking-java/issues/285
    // https://github.com/vimeo/vimeo-networking-java/pull/321
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains' , module:'annotations'
    }
}

// Publishing on Maven Central requires packages with Java source code and Javadocs.
// Note that "archiveClassifier" values are important for Maven Central.

task generateSourceJar(type: Jar) {
    description = 'Assembles a JAR with Java source code'
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task generateJavadoc(type: Javadoc) {
    description = 'Generates Javadocs from the source code'
    source = android.sourceSets.main.java.srcDirs
    title = 'Themis API Reference'
    // Javadoc chokes on non-Java files so exclude non-sources from the source dir.
    excludes = ['build', 'build.gradle']
    // Add Android core system and all dependencies to classpath so that Javadoc
    // finds their classes and links to them correctly.
    classpath += files(android.bootClasspath)
    android.libraryVariants.all { variant ->
        classpath += variant.javaCompile.classpath
    }
}

task generateJavadocJar(type: Jar) {
    description = 'Assembles a JAR with Javadocs'
    archiveClassifier = 'javadoc'
    from generateJavadoc.destinationDir
    dependsOn 'generateJavadoc'
}

// distribution

apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        Production(MavenPublication) {
            // TODO(ilammy, 2021-02-21): depend on release binaries explicitly
            // It would be nice to have the "publish" task depend on "assembleRelease"
            // so that you don't have sequence them manually. But the official way for
            // doing so seems to be way too braindead:
            // https://developer.android.com/studio/build/maven-publish-plugin
            artifact("build/outputs/aar/android.aar")
            artifact generateSourceJar
            artifact generateJavadocJar
            groupId 'com.cossacklabs.com'
            artifactId 'themis'
            version androidThemisVersion
            pom {
                name = 'Themis for Android'
                description = 'Cross-platform high-level cryptographic library for mobile, web, and server platforms'
                url = 'https://www.cossacklabs.com/themis/'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Cossack Labs'
                        email = 'dev@cossacklabs.com'
                        organization = 'Cossack Labs'
                        organizationUrl = 'https://www.cossacklabs.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/cossacklabs/themis.git'
                    developerConnection = 'scm:git:ssh://github.com:cossacklabs/themis.git'
                    url = 'https://github.com/cossacklabs/themis'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                // Use API tokens instead of actual username and password
                // https://oss.sonatype.org/#profile;User%20Token
                username System.getenv('OSSRH_USERNAME')
                password System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

// Credentials for signing should be set in "~/.gradle/gradle.properties" file.
// (The global one in your home directory, NOT the one in the project root.)
//
//     signing.gnupg.executable=gpg
//     signing.gnupg.keyName=...
//     signing.gnupg.passphrase=...
//
// Yes, only in that file. Because Gradle says so.
//
// https://docs.gradle.org/current/userguide/signing_plugin.html#example_configure_the_gnupgsignatory
signing {
    required { gradle.taskGraph.hasTask("publish") }
    useGpgCmd()
    sign publishing.publications.Production
}
